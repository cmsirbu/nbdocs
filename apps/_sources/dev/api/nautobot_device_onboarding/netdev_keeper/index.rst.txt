:py:mod:`nautobot_device_onboarding.netdev_keeper`
==================================================

.. py:module:: nautobot_device_onboarding.netdev_keeper

.. autoapi-nested-parse::

   NetDev Keeper.

   (c) 2020-2021 Network To Code
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   nautobot_device_onboarding.netdev_keeper.NetdevKeeper



Functions
~~~~~~~~~

.. autoapisummary::

   nautobot_device_onboarding.netdev_keeper.get_mgmt_info



Attributes
~~~~~~~~~~

.. autoapisummary::

   nautobot_device_onboarding.netdev_keeper.logger
   nautobot_device_onboarding.netdev_keeper.PLUGIN_SETTINGS


.. py:data:: logger
   

   

.. py:data:: PLUGIN_SETTINGS
   

   

.. py:function:: get_mgmt_info(hostname, ip_ifs, default_mgmt_if=PLUGIN_SETTINGS['default_management_interface'], default_mgmt_pfxlen=PLUGIN_SETTINGS['default_management_prefix_length'])

   Get the interface name and prefix length for the management interface.

   Locate the interface assigned with the hostname value and retain
   the interface name and IP prefix-length so that we can use it
   when creating the IPAM IP-Address instance.

   Note that in some cases (e.g., NAT) the hostname may differ than
   the interface addresses present on the device. We need to handle this.


.. py:class:: NetdevKeeper(hostname, port=None, timeout=None, username=None, password=None, secret=None, napalm_driver=None, optional_args=None)

   Used to maintain information about the network device during the onboarding process.

   .. py:method:: check_reachability(self)

      Ensure that the device at the mgmt-ipaddr provided is reachable.

      We do this check before attempting other "show" commands so that we know we've got a
      device that can be reached.

      Raises:
        OnboardException('fail-connect'):
          When device unreachable


   .. py:method:: guess_netmiko_device_type(self)

      Guess the device type of host, based on Netmiko.


   .. py:method:: set_napalm_driver_name(self)

      Sets napalm driver name.


   .. py:method:: check_napalm_driver_name(self)

      Checks for napalm driver name.


   .. py:method:: get_onboarding_facts(self)

      Gather information from the network device that is needed to onboard the device into the Nautobot system.

      Raises:
        OnboardException('fail-login'):
          When unable to login to device

        OnboardException('fail-execute'):
          When unable to run commands to collect device information

        OnboardException('fail-general'):
          Any other unexpected device comms failure.


   .. py:method:: get_netdev_dict(self)

      Construct network device dict.



