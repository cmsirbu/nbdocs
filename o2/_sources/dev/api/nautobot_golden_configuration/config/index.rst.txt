:py:mod:`nautobot_golden_configuration.config`
==============================================

.. py:module:: nautobot_golden_configuration.config

.. autoapi-nested-parse::

   Config module to load settings.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   nautobot_golden_configuration.config.Settings



Functions
~~~~~~~~~

.. autoapisummary::

   nautobot_golden_configuration.config.load
   nautobot_golden_configuration.config.load_or_exit



Attributes
~~~~~~~~~~

.. autoapisummary::

   nautobot_golden_configuration.config.SETTINGS
   nautobot_golden_configuration.config.ENV_FILE_PATH


.. py:data:: SETTINGS
   

   

.. py:data:: ENV_FILE_PATH
   

   

.. py:class:: Settings

   Bases: :py:obj:`pydantic.BaseSettings`

   Main Settings Class for the project.

   The type of each setting is defined using Python annotations and Pydantic field types
   and is validated when a config file is loaded with Pydantic.

   .. py:class:: Config

      Config class to be used for Settings.

      .. py:attribute:: env_prefix
         :annotation: = NAUTOBOT_GOLDEN_CONFIGURATION_

         

      .. py:attribute:: env_file
         

         

      .. py:attribute:: env_file_encoding
         :annotation: = utf-8

         


   .. py:attribute:: string_required
      :annotation: :str

      

   .. py:attribute:: secret_optional
      :annotation: :Optional[pydantic.types.SecretStr]

      

   .. py:attribute:: array_default
      :annotation: :List[str] = []

      

   .. py:attribute:: url_default
      :annotation: :pydantic.networks.AnyHttpUrl = http://localhost

      

   .. py:attribute:: ip_address
      :annotation: :pydantic.networks.IPvAnyAddress = 192.168.0.1

      

   .. py:attribute:: ip_network
      :annotation: :pydantic.networks.IPvAnyNetwork = 2001:db8:3c4d:15::/64

      

   .. py:attribute:: file
      :annotation: :pydantic.types.FilePath = some/path/file.txt

      

   .. py:attribute:: directory
      :annotation: :pydantic.types.DirectoryPath = tests/

      


.. py:function:: load(config_file_name='pyproject.toml', config_data=None)

   Loads passed dynamic settings data using `config data` or from a TOML configuration file (pyproject.toml).

   When loaded from file, the settings for this app are expected to be in [tool.nautobot-golden-configuration] in TOML
   if nothing is found in the config file or if the config file do not exist, the default values will be used.

   Args:
       config_file_name (str, optional): Name of the configuration file to load. Defaults to "pyproject.toml".
       config_data (dict, optional): dict to load as the config file instead of reading the file. Defaults to None.


.. py:function:: load_or_exit(config_file_name='pyproject.toml', config_data=None)

   Loads passed dynamic settings data using `config data` or from a TOML configuration file (pyproject.toml).

   If a validation error is found, it will print out the respective error and exit from the app.

   When loaded from file, the settings for this app are expected to be in [tool.nautobot_golden_configuration] in TOML
   if nothing is found in the config file or if the config file do not exist, the default values will be used.

   Args:
       config_file_name (str, optional): Name of the configuration file to load. Defaults to "pyproject.toml".
       config_data (dict, optional): dict to load as the config file instead of reading the file. Defaults to None.


